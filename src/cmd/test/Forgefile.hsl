include ../../build/toolsets.hsl

local var src type list;
local var includes type list;
local var cflags type list;
local var libraries type list;
local var ldflags type list;
local var appname type string;

local var curr_toolset type string;

project cmd-tests : toolset $curr_toolset : $src, $includes, $cflags, $libraries, $ldflags, $appname;

cmd-tests.preloading() {
    $curr_toolset = get_app_toolset();
}

cmd-tests.prologue() {
    if (build("libkryptos") != 0 || build("libcutest") != 0) {
        hefesto.project.abort(1);
    }

    $src.ls(".*c$");

    $includes = hefesto.sys.get_option("includes");
    $cflags = hefesto.sys.get_option("cflags");
    $libraries = hefesto.sys.get_option("libraries");
    $ldflags = hefesto.sys.get_option("ldflags");
    $appname = "cmd-tests";

    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    hefesto.sys.cd("../o");
    $ldflags.ls(".*(utils).o$");
    hefesto.sys.cd($oldcwd);

    if (hefesto.sys.os_name() == "linux") {
        $ldflags.add_item("-ldl");
        $ldflags.add_item("-lpthread");
    } else if (hefesto.sys.os_name() == "freebsd") {
        $ldflags.add_item("-lexecinfo");
        $ldflags.add_item("-lpthread");
    } else if (hefesto.sys.os_name() == "netbsd") {
        $cflags.add_item("-std=c99");
        $ldflags.add_item("-lexecinfo");
        $ldflags.add_item("-lpthread");
    }
}

cmd-tests.epilogue() {
    if (hefesto.sys.last_forge_result() == 0) {
        if (runtests() != 0) {
            hefesto.project.abort(1);
        }
    }
}

local function runtests() : result type int {
    var exit_code type int;
    $exit_code = hefesto.sys.run(hefesto.sys.make_path("bin", $appname) + " --cutest-leak-check=yes");
    result $exit_code;
}
