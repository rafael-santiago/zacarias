#
#                    Copyright (C) 2020, 2021 by Rafael Santiago
#
# Use of this source code is governed by GPL-v2 license that can
# be found in the COPYING file.
#
#

include ~/toolsets/gcc/gcc-lib.hsl
include ~/toolsets/gcc/gcc-app.hsl
include ~/toolsets/clang/clang-lib.hsl
include ~/toolsets/clang/clang-app.hsl
include ~/toolsets/common/utils/lang/c/dependency_scanner.hsl

include on linux ~/toolsets/linux/linux-module.hsl
include on freebsd ~/toolsets/freebsd/freebsd-module.hsl
include on netbsd ~/toolsets/netbsd/netbsd-module.hsl
include on windows ~/toolsets/windows/driver/windows-driver.hsl
include on windows,openbsd,minixm,sunos ~/toolsets/null/null.hsl

include ~/fsutil.hsl

function zacarias_rootdir() : result type string {
    result hefesto.sys.env("ZACARIAS_ROOTDIR");
}

local function build_libXorg() : result type int {
    if (hefesto.sys.os_name() == "windows") {
        hefesto.sys.echo("BUILD ERROR: Unable to build Xorg on Windows.\n");
        result 1;
    }

    var Xorg_build_task type list;

    var option type list;
    if (isfile(hefesto.sys.make_path(zacarias_rootdir(), "lib/Xorg/libX11.a")) == 0) {
        $option = hefesto.sys.get_option("libX11-pkg");
        if ($option.count() == 0) {
            hefesto.sys.echo("BUILD ERROR: --libX11-pkg option is missing.\n");
            result 1;
        }
        $Xorg_build_task.add_item("do_libX11_build");
    }

    if (isfile(hefesto.sys.make_path(zacarias_rootdir(), "lib/Xorg/libXtst.a")) == 0) {
        $option = hefesto.sys.get_option("libXtst-pkg");
        if ($option.count() == 0) {
            hefesto.sys.echo("BUILD ERROR: --libXtst-pkg option is missing.\n");
            result 1;
        }
        $Xorg_build_task.add_item("do_libXtst_build");
    }

    if (isfile(hefesto.sys.make_path(zacarias_rootdir(), "lib/Xorg/libxcb.a")) == 0) {
        $option = hefesto.sys.get_option("libxcb-pkg");
        if ($option.count() == 0) {
            hefesto.sys.echo("BUILD ERROR: --libxcb-pkg is missing.\n");
            result 1;
        }
        $Xorg_build_task.add_item("do_libxcb_build");
    }

    if (isfile(hefesto.sys.make_path(zacarias_rootdir(), "lib/Xorg/libXext.a")) == 0) {
        $option = hefesto.sys.get_option("libXext-pkg");
        if ($option.count() == 0) {
            hefesto.sys.echo("BUILD ERROR: --libXext-pkg is missing.\n");
            result 1;
        }
        $Xorg_build_task.add_item("do_libXext_build");
    }

    if (isfile(hefesto.sys.make_path(zacarias_rootdir(), "lib/Xorg/libXdmcp.a")) == 0) {
        $option = hefesto.sys.get_option("libXdmcp-pkg");
        if ($option.count() == 0) {
            hefesto.sys.echo("BUILD ERROR: --libXdmcp-pkg is missing.\n");
            result 1;
        }
        $Xorg_build_task.add_item("do_libXdmcp_build");
    }

    if (isfile(hefesto.sys.make_path(zacarias_rootdir(), "lib/Xorg/libXau.a")) == 0) {
        $option = hefesto.sys.get_option("libXau-pkg");
        if ($option.count() == 0) {
            hefesto.sys.echo("BUILD ERROR: --libXau-pkg is missing.\n");
            result 1;
        }
        $Xorg_build_task.add_item("do_libXau_build");
    }

    if ($Xorg_build_task.count() == 0) {
        # INFO(Rafael): All needed Xorg artifacts were found. There is no necessity
        #               of running any build sub-task.
        result 0;
    }

    if (has_tar() == 0) {
        hefesto.sys.echo("SYSTEM SANITY CHECK FAILURE: you need tar in order to unpack Xorg's packages tarballs.\n");
        result 1;
    }

    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();

    if (hefesto.sys.cd(zacarias_rootdir()) == 0) {
        hefesto.sys.echo("BUILD ERROR: Unable to change to zacarias rootdir.\n");
        result 1;
    }

    mktree("lib/Xorg/stage");

    if (hefesto.sys.cd("lib/Xorg/stage") == 0) {
        hefesto.sys.echo("BUILD ERROR: Unable to change to lib sub-directory.\n");
        result 1;
    }

    var exit_code type int;
    $exit_code = 0;

    var x type int;
    $x = 0;
    while ($exit_code == 0 && $x < $Xorg_build_task.count()) {
        var build_subtask type int;
        $build_subtask = hefesto.sys.get_func_addr($Xorg_build_task.item($x));
        if ($build_subtask == 0) {
            hefesto.sys.echo("BUILD ERROR: Unknown Xorg build sub-task.\n");
            $exit_code = 1;
        } else {
            $exit_code = hefesto.sys.call_func_addr($build_subtask);
        }
        $x = $x + 1;
    }

    hefesto.sys.cd("..");
    hefesto.sys.run("rm -rf stage");

    if ($exit_code != 0) {
        hefesto.sys.cd("..");
        hefesto.sys.run("rm -rf Xorg");
    }

    hefesto.sys.cd($oldcwd);

    result $exit_code;
}

local function has_tar() : result type int {
    result (hefesto.sys.run("tar --version >/dev/null 2>&1") == 0);
}

local function do_libX11_build() : result type int {
    result do_metaXorg_build("libX11-pkg", "src/.libs/libX11.a", "libX11.a");
}

local function do_libXtst_build() : result type int {
    result do_metaXorg_build("libXtst-pkg", "src/.libs/libXtst.a", "libXtst.a");
}

local function do_libxcb_build() : result type int {
    result do_metaXorg_build("libxcb-pkg", "src/.libs/libxcb.a", "libxcb.a");
}

local function do_libXext_build() : result type int {
    result do_metaXorg_build("libXext-pkg", "src/.libs/libXext.a", "libXext.a");
}

local function do_libXdmcp_build() : result type int {
    result do_metaXorg_build("libXdmcp-pkg", ".libs/libXdmcp.a", "libXdmcp.a");
}

local function do_libXau_build() : result type int {
    result do_metaXorg_build("libXau-pkg", ".libs/libXau.a", "libXau.a");
}

local function do_metaXorg_build(pkg_option type string, artifact_srcpath type string,
                                 artifact_name type string) : result type int {
    var option type list;
    $option = hefesto.sys.get_option($pkg_option);
    var filepath type string;
    $filepath = $option.item(0);

    if (unpack_tarball($filepath) != 0) {
        hefesto.sys.echo("BUILD ERROR: Unable to unpack `" + $filepath + "`.\n");
        result 1;
    }

    var dirname type string;
    $dirname = filenamefrompath($filepath);
    $dirname.replace("\\.tar\\..*$", "");

    if (hefesto.sys.cd($dirname) == 0) {
        hefesto.sys.echo("BUILD ERROR: Unable to find sub-directory `" + $dirname + "`.\n");
        result 1;
    }

    var exit_code type int;
    $exit_code = 0;

    $exit_code = hefesto.sys.run("./configure --enable-static");

    if ($exit_code == 0) {
        $exit_code = hefesto.sys.run("make");
        if ($exit_code == 0) {
            var artifact_path type string;
            $artifact_path = hefesto.sys.make_path(zacarias_rootdir(), "lib/Xorg/" + $artifact_name);
            hefesto.sys.rm($artifact_path);
            if (hefesto.sys.cp($artifact_srcpath, $artifact_path) != 1) {
                hefesto.sys.echo("BUILD ERROR: Unable to copy `" + $artifact_path + "`.\n");
                $exit_code = 1;
            }
        }
    }

    hefesto.sys.cd("..");
    hefesto.sys.run("rm -rf " + $dirname);

    result 0;
}

local function unpack_tarball(filepath type string) : result type int {
    if ($filepath.match("\\.bz2")) {
        result hefesto.sys.run("tar -xf " + $filepath);
    }
    result hefesto.sys.run("tar -xvf " + $filepath);
}

function mklocal(libname type string) : result type none {
    var func_addr type int;

    $func_addr = hefesto.sys.get_func_addr("mklocal_" + $libname);

    if ($func_addr == 0) {
        hefesto.sys.echo("BUILD ERROR: Unknown lib '" + $libname + "'.\n");
        result 1;
    }

    hefesto.sys.call_func_addr($func_addr);
}

local function mklocal_kryptos() : result type none {
    if (isdir("kryptos") == 0 || is_clean_build()) {
        var src type string;
        $src = hefesto.sys.make_path(zacarias_rootdir(), "lib/kryptos/src");
        do_mklocal($src, "kryptos");
    }
}

local function mklocal_ctx() : result type none {
    if (isdir("ctx") == 0 || is_clean_build()) {
        var src type string;
        $src = hefesto.sys.make_path(zacarias_rootdir(), "dev/ctx");
        do_mklocal($src, "ctx");
    }
}

local function mklocal_sec() : result type none {
    if (isdir("sec") == 0 || is_clean_build()) {
        var src type string;
        $src = hefesto.sys.make_path(zacarias_rootdir(), "dev/sec");
        do_mklocal($src, "sec");
    }
}

local function mklocal_defs() : result type none {
    if (isdir("defs") == 0 || is_clean_build()) {
        var src type string;
        $src = hefesto.sys.make_path(zacarias_rootdir(), "dev/defs");
        do_mklocal($src, "defs");
    }
}

local function mklocal_kutest() : result type none {
    var src type string;
    $src = hefesto.sys.make_path(zacarias_rootdir(), "lib/cutest/src/kutest.h");
    hefesto.sys.cp($src, "kutest.h");
}

local function is_unix_env() : result type int {
    var is type int;
    $is = (hefesto.sys.run("uname -s >.uname-out") == 0);
    hefesto.sys.rm(".uname-out");
    result $is;
}

local function do_mklocal(src type string, dest type string) : result type none {
    if (is_unix_env()) {
        hefesto.sys.run("rm -rf " + $dest);
        hefesto.sys.run("mkdir " + $dest);
        hefesto.sys.run("cp " + $src + "/*.[ch] " + $dest);
    } else if (hefesto.sys.os_name() == "windows") {
        $src.replace("/", "\\");
        $dest.replace("/", "\\");
        hefesto.sys.run("rmdir /q /s " + $dest);
        hefesto.sys.run("mkdir " + $dest);
        hefesto.sys.run("copy " + $src + "\\*.c " + $dest + " /Y");
        hefesto.sys.run("copy " + $src + "\\*.h " + $dest + " /Y");
    }
}

function is_clean_build() : result type int {
    var clean type list;
    $clean = hefesto.sys.get_option("clean");
    result ($clean.count() > 0);
}

function get_app_toolset() : result type string {
    result get_toolset() + "-c-app";
}

function get_lib_toolset() : result type string {
    result get_toolset() + "-c-lib";
}

function get_lkm_toolset() : result type string {
    if (hefesto.sys.os_name() == "linux") {
        result "linux-lkm";
    } else if (hefesto.sys.os_name() == "freebsd") {
        result "freebsd-kld";
    } else if (hefesto.sys.os_name() == "netbsd") {
        result "netbsd-module";
    }
    result "no-tool-any-set-lkm";
}

function get_codes(dirlist type list, deps type string) : result type list {
    var oldcwd type string;
    var codes type list;

    $oldcwd = hefesto.sys.pwd();

    hefesto.sys.setenv("GET_C_CPP_DEPS_SRC_ROOT", $oldcwd);

    var d type int;

    $d = 0;

    while ($d < $dirlist.count()) {
        var dirpath type string;
        $dirpath = $dirlist.item($d);

        if (hefesto.sys.cd($dirpath)) {
            $deps = $deps + get_c_cpp_deps();
            $codes.ls(".*\\.c$");
            hefesto.sys.cd($oldcwd);
        } else {
            hefesto.sys.echo("WARN: Unable to access the path \'" + $dirpath + "'. Just skipping it.\n");
        }

        $d = $d + 1;
    }

    hefesto.sys.cd($oldcwd);

    hefesto.sys.byref($deps);

    result $codes;
}

function mkclean() : result type none {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    mkclean_recur(lsdir());
    hefesto.sys.cd($oldcwd);
}

function ask_user(query type string, answers type list) : result type string {
    var a type string;
    while ($answers.index_of($a) == -1) {
        $a = hefesto.sys.prompt($query);
    }
    result $a;
}

local function mkclean_recur(dirlist type list) : result type none {
    var d type int;

    $d = 0;

    while ($d < $dirlist.count()) {
        if (hefesto.sys.cd($dirlist.item($d))) {
            var objs type list;
            $objs.ls(".*\\.o$");

            var o type int;
            $o = 0;
            while ($o < $objs.count()) {
                var filepath type string;
                $filepath = $objs.item($o);
                hefesto.sys.echo("Removing: " + $filepath + "\n");
                hefesto.sys.rm($filepath);

                $o = $o + 1;
            }

            mkclean_recur(lsdir());
        }
        $d = $d + 1;
    }
}

local function build_libaegis() : result type int {
    var libpath type string;
    var rootdir type string;

    $rootdir = hefesto.sys.env("ZACARIAS_ROOTDIR");
    $libpath = hefesto.sys.make_path($rootdir, "lib/aegis/lib/libaegis.a");

    var exit_code type int;

    if (isfile($libpath) == 0) {
        $exit_code = 1;
        var oldcwd type string;
        $oldcwd = hefesto.sys.pwd();
        $libpath = hefesto.sys.make_path($rootdir, "lib/aegis/src");
        if (hefesto.sys.cd($libpath)) {
            $exit_code = hefesto.sys.run("hefesto --no-tests");
        }
        hefesto.sys.cd($oldcwd);
    }

    result $exit_code;
}

local function build_libkryptos() : result type int {
    var libpath type string;
    var rootdir type string;

    $rootdir = hefesto.sys.env("ZACARIAS_ROOTDIR");

    $libpath = hefesto.sys.make_path($rootdir, "lib/kryptos/lib/libkryptos.a");

    var exit_code type int;

    $exit_code = 0;

    if (isfile($libpath) == 0) {
        $exit_code = 1;
        var oldcwd type string;
        $oldcwd = hefesto.sys.pwd();
        $libpath = hefesto.sys.make_path($rootdir, "lib/kryptos/src/");
        if (hefesto.sys.cd($libpath)) {
            if (hefesto.sys.os_name() == "freebsd") {
                $exit_code = hefesto.sys.run("hefesto");
            } else {
                $exit_code = hefesto.sys.run("hefesto --no-hmac-tests");
            }
            hefesto.sys.cd($oldcwd);
        }
    }

    result $exit_code;
}

local function build_libcutest() : result type int {
    var libpath type string;
    var rootdir type string;

    $rootdir = hefesto.sys.env("ZACARIAS_ROOTDIR");

    $libpath = hefesto.sys.make_path($rootdir, "lib/cutest/src/lib/libcutest.a");

    var exit_code type int;

    $exit_code = 0;

    if (isfile($libpath) == 0) {
        $exit_code = 1;
        var oldcwd type string;
        $oldcwd = hefesto.sys.pwd();
        $libpath = hefesto.sys.make_path($rootdir, "lib/cutest/src/");
        if (hefesto.sys.cd($libpath)) {
            $exit_code = hefesto.sys.run("hefesto");
            hefesto.sys.cd($oldcwd);
        }
    }

    result $exit_code;
}

local function build_libaccacia() : result type int {
    var libpath type string;
    var rootdir type string;

    $rootdir = hefesto.sys.env("ZACARIAS_ROOTDIR");

    $libpath = hefesto.sys.make_path($rootdir, "lib/accacia/lib/libaccacia.a");

    var exit_code type int;

    $exit_code = 0;

    if (isfile($libpath) == 0) {
        $exit_code = 1;
        var oldcwd type string;
        $oldcwd = hefesto.sys.pwd();
        $libpath = hefesto.sys.make_path($rootdir, "lib/accacia/src");
        if (hefesto.sys.cd($libpath)) {
            $exit_code = hefesto.sys.run("hefesto");
            hefesto.sys.cd($oldcwd);
        }
    }

    result $exit_code;
}

function build(libname type string) : result type int {
    var func_addr type int;

    $func_addr = hefesto.sys.get_func_addr("build_" + $libname);

    if ($func_addr == 0) {
        hefesto.sys.echo("BUILD ERROR: Unknown lib '" + $libname + "'.\n");
        result 1;
    }

    result hefesto.sys.call_func_addr($func_addr);
}

local function get_toolset() : result type string {
    var option type list;
    var return type string;

    $option = hefesto.sys.get_option("toolset");

    if ($option.count() > 0) {
        $return = $option.item(0);
        $return.replace("-.*$", "");
        result $return;
    }

    if (has_gcc()) {
        $return = "gcc";
    } else if (has_clang()) {
        $return = "clang";
    } else {
        hefesto.sys.echo("ERROR: You must have gcc or clang well installed in your system.\n" +
                         "       Install one of them and try again later.\n");
        hefesto.project.abort(1);
    }

    result $return;
}

local function has_gcc() : result type int {
    result (execbkcmd("gcc --version") == 0);
}

local function has_clang() : result type int {
    result (execbkcmd("clang --version") == 0);
}

local function execbkcmd(cmdline type string) : result type int {
    if (hefesto.sys.os_name() != "windows") {
        $cmdline = $cmdline + " > /dev/null 2>&1";
    } else {
        $cmdline = $cmdline + " >  nul 2>&1";
    }

    result hefesto.sys.run($cmdline);
}

function mkclean_modules(modules type list) : result type none {
    var rootpath type string;

    $rootpath = hefesto.sys.pwd();

    var m type int;

    $m = 0;
    while ($m < $modules.count()) {
        var moddir type string;
        $moddir = hefesto.sys.make_path($rootpath, $modules.item($m));

        if (hefesto.sys.cd($moddir)) {
            var depchain_rec type list;
            var d type int;

            $depchain_rec.ls(".*\\.Forgefile-.*-hefesto-src-chsum-base$");

            $d = 0;

            while ($d < $depchain_rec.count()) {
                hefesto.sys.rm($depchain_rec.item($d));
                $d = $d + 1;
            }

            $depchain_rec.clear();

            var obj_dirpath type string;
            $obj_dirpath = hefesto.sys.make_path($moddir, "o");

            if (hefesto.sys.cd($obj_dirpath)) {
                var objs type list;
                $objs.ls(".*\\.o$");

                var o type int;
                $o = 0;
                while ($o < $objs.count()) {
                    hefesto.sys.echo("*** removing '" + $objs.item($o) + "'... ");

                    if (hefesto.sys.rm($objs.item($o)) == 0) {
                        hefesto.sys.echo("done.\n");
                    } else {
                        hefesto.sys.echo("failed.\n");
                    }

                    $o = $o + 1;
                }

                $objs.clear();
            }
        }

        $m = $m + 1;
    }

    hefesto.sys.cd($rootpath);
}

function has_bad_funcs(func_signatures type list, srcs type list, incs type list, cflags type list) : result type int {
    var option type list;
    $option = hefesto.sys.get_option("allow-bad-funcs");

    if ($option.count() > 0) {
        hefesto.sys.echo("\nWARN: Bad functions are being allowed.\n");
        result 0;
    }

    var cmdline type string;
    $cmdline = get_toolset();

    var i type int;
    $i = 0;
    while ($i < $incs.count()) {
        $cmdline = $cmdline + " -I\"" + $incs.item($i) + "\"";
        $i = $i + 1;
    }

    var c type int;
    $c = 0;
    while ($c < $cflags.count()) {
        $cmdline = $cmdline + " " + $cflags.item($c);
        $c = $c + 1;
    }

    $cmdline = $cmdline + " -S -o .asm-out.s";

    hefesto.sys.echo("\nBUILD INFO: Searching for direct references to bad functions...\n");

    var founds type list;

    var s type int;
    $s = 0;
    while ($s < $srcs.count() && $founds.count() == 0) {
        hefesto.sys.echo("\t*** " + $srcs.item($s) + ": ");

        if (hefesto.sys.run($cmdline + " \"" + $srcs.item($s) + "\"") != 0) {
            hefesto.sys.echo("\nERROR: Unable to generate assembly file.\n");
            result 1;
        }

        var f type int;
        $f = 0;
        while ($f < $func_signatures.count()) {
            var regex type string;
            $regex = "(call|mov).*[ \t]" + $func_signatures.item($f);
            var bad_lines type list;
            $bad_lines = hefesto.sys.lines_from_file(".asm-out.s", $regex);
            if ($bad_lines.count() > 0 && $founds.index_of($func_signatures.item($f)) == -1) {
                $founds.add_item($func_signatures.item($f));
            }
            $f = $f + 1;
        }

        if ($founds.count() > 0) {
            hefesto.sys.echo("dirty.\n*** error.\n\n");
            hefesto.sys.echo("ERROR: Calls to bad functions found in '" + $srcs.item($s) + "'\n" +
                             "       Bad functions referenced:");

            $f = 0;
            while ($f < $founds.count()) {
                if ($f > 0) {
                    hefesto.sys.echo(", " + $founds.item($f));
                } else {
                    hefesto.sys.echo(" " + $founds.item($f));
                }

                $f = $f + 1;
            }

            hefesto.sys.echo("\n       Take a look at '" + hefesto.sys.pwd() + "/.asm-out.s'.\n\n");
        } else {
            hefesto.sys.rm(".asm-out.s");
            hefesto.sys.echo("clean.\n");
        }

        $s = $s + 1;
    }

    if ($founds.count() == 0) {
        hefesto.sys.echo("*** all clean.\n");
    }

    result ($founds.count() > 0);
}

function get_msvc_artifact_postfix() : result type string {
    var cfg_postfix type string;
    $cfg_postfix = "mt";

    var option type list;
    $option = hefesto.sys.get_option("compile-model");
    if ($option.count() > 0) {
        var compile_model type string;
        $compile_model = $option.item(0);
        if ($compile_model == "debug") {
            $cfg_postfix = $cfg_postfix + "d";
        }
    }

    result $cfg_postfix;
}

function get_msvc_platform() : result type string {
    var option type list;
    var arch type string;

    $option = hefesto.sys.get_option("cpu-arch");
    if ($option.count() == 0) {
        var programfilesx86 type string;
        $programfilesx86 = hefesto.sys.env("ProgramFiles(x86)");
        if ($programfilesx86.len() > 0) {
            result "x64";
        }
        result "Win32";
    }

    $arch = $option.item(0);

    if($arch == "x86" || $arch == "X86") {
        result "Win32";
    }

    result $arch;
}

function is_secure_boot_based_env() : result type int {
    # TODO(Rafael): Verify efivars.
    if (hefesto.sys.os_name() != "linux") {
        result 0;
    }
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    if (hefesto.sys.cd("/sys/firmware/efi/efivars") == 0) {
        result 0;
    }
    var efivars type list;
    $efivars.ls("SecureBoot-.*");
    hefesto.sys.cd($oldcwd);
    result ($efivars.count() > 0);
}

local function mk_keypair(priv_key_path type string,
                          pub_key_path type string) : result type int {
    var x509_genkey type string;
    $x509_genkey = "[req]\n" +
                   "distinguished_name = zacarias\n" +
                   "default_bits = 4096\n" +
                   "prompt = no\n\n" +
                   "[zacarias]\n" +
                   "O = Particular\n" +
                   "CN = Build time autogenerated kernel key\n" +
                   "emailAddress = zacarias@local.here\n";
    var fp type file;
    $fp = hefesto.sys.fopen("zacarias_x509.genkey", "wb");
    if ($fp == 0) {
        result 1;
    }
    hefesto.sys.fwrite($x509_genkey, $x509_genkey.len(), $fp);
    hefesto.sys.fclose($fp);
    var err type int;
    $err = hefesto.sys.run("openssl " +
                           "req -new -nodes -utf8 -sha256 -days 36500 -batch -x509 " +
                           "-config zacarias_x509.genkey -outform PEM -out " +
                           $pub_key_path + " -keyout " + $priv_key_path);
    if ($err != 0) {
        hefesto.sys.echo("ERROR: When generation key pair.\n");
    }
    hefesto.sys.rm("zacarias_x509.genkey");
    result $err;
}

local function sign_ko(mod_path type string,
                       priv_key_path type string,
                       pub_key_path type string) : result type int {
    result hefesto.sys.run("/usr/src/linux-headers-$(uname -r)/scripts/sign-file sha512 " +
                           $priv_key_path + " " + $pub_key_path + " " + $mod_path);
}

local function add_pubkey_to_keyring(keyring_id type string,
                                     pub_key_path type string) : result type int {
    result hefesto.sys.run("keyctl padd asymmetric \"\" " + $keyring_id + "<" + $pub_key_path);
}

function sign_linux_lkm(mod_path type string) : result type int {
    var priv_key_path type string;
    var pub_key_path type string;
    var system_keyring_id type string;

    var option type list;

    $option = hefesto.sys.get_option("priv-key-path");
    if ($option.count() == 0) {
        $option = hefesto.sys.get_option("system-keyring-id");
        if ($option.count() == 0) {
            hefesto.sys.echo("ERROR: --system-keyring-id is missing.\n");
            result 1;
        }
        $system_keyring_id = $option.item(0);

        $priv_key_path = hefesto.sys.make_path(zacarias_rootdir(), "../etc/zcdev_priv.pem");
        $pub_key_path = hefesto.sys.make_path(zacarias_rootdir(), "../etc/zcdev_pub.pem");
        if (isfile($priv_key_path) == 0 || isfile($pub_key_path) == 0) {
            if (mk_keypair($priv_key_path, $pub_key_path) != 0) {
                result 1;
            }

            hefesto.sys.echo("INFO: Key pair generated at " + $priv_key_path +
                             " and " + $pub_key_path + "\n");
            if (add_pubkey_to_keyring($system_keyring_id, $pub_key_path) != 0) {
                hefesto.sys.echo("ERROR: Unable to add public key to system keyring.\n");
                hefesto.sys.rm($priv_key_path);
                hefesto.sys.rm($pub_key_path);
                result 1;
            }
        }
    } else {
        $priv_key_path = $option.item(0);
        $option = hefesto.sys.get_option("pub-key-path");
        if ($option.count() == 0) {
            hefesto.sys.echo("ERROR: --pub-key-path option is missing.\n");
            result 1;
        }
        $pub_key_path = $option.item(0);
        if ($priv_key_path.at(0) != "/") {
            $priv_key_path = hefesto.sys.make_path(zacarias_rootdir(), $priv_key_path);
        }
        if ($pub_key_path.at(0) != "/") {
            $pub_key_path = hefesto.sys.make_path(zacarias_rootdir(), $pub_key_path);
        }
    }

    var err type int;

    $err = sign_ko($mod_path, $priv_key_path, $pub_key_path);
    if ($err == 0) {
        hefesto.sys.echo("INFO: The lkm " + $mod_path + " was successfully signed.\n");
    }

    result 0;
}
