#
#                    Copyright (C) 2020, 2021 by Rafael Santiago
#
# Use of this source code is governed by GPL-v2 license that can
# be found in the COPYING file.
#
#

include ../../build/toolsets.hsl

local var curr_toolset type string;
local var src type list;
local var includes type list;
local var cflags type list;
local var libraries type list;
local var ldflags type list;
local var appname type string;

project libzckbd-tests : toolset $curr_toolset : $src, $includes, $cflags, $libraries, $ldflags, $appname;

libzckbd-tests.preloading() {
    $curr_toolset = get_app_toolset();
}

libzckbd-tests.prologue() {
    if (build("libkryptos") != 0 || build("libcutest") != 0) {
        hefesto.project.abort(1);
    }
    var dirlist type list;
    $dirlist.add_item(".");

    var dummy type string;
    $src = get_codes($dirlist, $dummy);

    $includes = hefesto.sys.get_option("includes");
    $cflags = hefesto.sys.get_option("cflags");
    $libraries = hefesto.sys.get_option("libraries");
    $ldflags = hefesto.sys.get_option("ldflags");
    var option type list;
    if (hefesto.sys.os_name() != "windows") {
        $ldflags.add_item("-lX11");
        $ldflags.add_item("-lXtst");
        $option = hefesto.sys.get_option("disable-static");
        if ($option.count() == 0) {
            if (build("libXorg") != 0) {
                hefesto.project.abort(1);
            }
            $libraries.add_item("../../lib/Xorg");
            $ldflags.add_item("-lxcb");
            $ldflags.add_item("-lXext");
            $ldflags.add_item("-lXdmcp");
            $ldflags.add_item("-lXau");
            $ldflags.add_item("-lpthread");
        }
    }
    $appname = "libzckbd-tests";

    if (hefesto.sys.os_name() == "linux") {
        $ldflags.add_item("-ldl");
        $ldflags.add_item("-lpthread");
    } else if (hefesto.sys.os_name() == "freebsd") {
        $ldflags.add_item("-lexecinfo");
        $ldflags.add_item("-lpthread");
    } else if (hefesto.sys.os_name() == "netbsd") {
        $cflags.add_item("-std=c99");
        $ldflags.add_item("-lexecinfo");
        $ldflags.add_item("-lpthread");
    }
}

libzckbd-tests.epilogue() {
    if (hefesto.sys.last_forge_result() == 0) {
        if (runtests() != 0) {
            hefesto.project.abort(1);
        }
    }
}

local function runtests() : result type int {
    var fp type file;
    $fp = hefesto.sys.fopen(".input", "wb");
    if ($fp == 0) {
        hefesto.sys.echo("PANIC: Unable to create '.input' file. Aborted.\n");
        result 1;
    }
    var buf type string;
    $buf = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.\n";
    hefesto.sys.fwrite($buf, $buf.len(), $fp);
    hefesto.sys.fclose($fp);
    var exit_code type int;
    $exit_code = hefesto.sys.run(hefesto.sys.make_path("bin", $appname) + " --cutest-leak-check=yes < .input");
    hefesto.sys.rm(".input");
    result $exit_code;
}
